Linked List
การสร้างนิยาม Struct node 
 Struct node{
    int data;
    Struct node *next;
 };

ตัวอย่างการใช้ Linked List

#include<stdio.h>
#include<stdlib.h>

typedef struct Node{
    int data ;
    struct Node* next ;
    struct Node* pre ;
}Node;

//   3 -> 5 -> 8 -> 1

Node* insertNode(Node* h, int dataWantToAdd){
    Node* temp ;
    temp = h ;
    while(temp->next != NULL){
        temp = temp->next ;
    }
    Node* n = malloc(sizeof(Node)) ;
    n->data = dataWantToAdd ;
    n->next = NULL ;
    n->pre = temp ;
    temp->next = n ;

    return h ;
}

void printList(Node* h){
    Node* temp ;
    temp = h ;
    while(temp != NULL){
        printf(" %d ->", temp->data) ;
        temp = temp->next ;
    }
}


int main(){

    Node* head ;
    head->data = 3 ;
    head->next = NULL ;
    head->pre = NULL ;

    head = insertNode(head, 5) ;
    head = insertNode(head, 8) ;
    head = insertNode(head, 1) ;
    head = insertNode(head, 0) ;

    printList(head) ;


    return 0 ;
}

ผลลัพธ์ของโปรแกรมนี้ 3 -> 5 -> 8 -> 1 -> 0 

ตัวอย่างการใช้ Linked list 2 

#include <stdio.h>
#include <stdlib.h>
struct node {             <---- กำหนด struct ขึ้นมา
int data;
struct node *next;
};
struct node *create_list()
{ struct node *first, *second, *third;
first = (struct node *)malloc(sizeof(struct node));
second = (struct node *)malloc(sizeof(struct node));
third = (struct node *)malloc(sizeof(struct node));
first->data = 17;
first->next = second;               <------ให้ค่าของตัวแปรต่างๆของnode
second->data = 29;
second->next = third;
third->data = 93;
third->next = NULL;
return first;
}
void print_list(struct node *head)
{ struct node *tmp; 
for (tmp=head; tmp; tmp = tmp->next)    <--- print_list ที่ได้จากการเชื่อมของnode 
printf("%d\n", tmp->data);                   ของ struct นี้
}
int main()
{ struct node *head;
head = create_list();  <--- เรียกใช้ฟังก์ชันcreate_list
print_list(head);
}

ผลลัพธ์ของโปรแกรมนี้ 
17 29 93